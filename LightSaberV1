// NeoPixel0.C
//
// This program drives a NeoPixel connected to RD0
// Drives the NeoPixel with 16 colors
//
//
// Global Variables

unsigned char PIXEL @ 0x000;

const unsigned char MSG0[20] = "NeoPixel0.C        ";
const unsigned char MSG1[20] = "                   ";

int LIGHT;


// Subroutine Declarations
#include <pic18.h>

// Subroutines
#include        "lcd_portd.c"

unsigned int A2D_Read(unsigned char c)
{
   unsigned int result;
   unsigned char i;
   c = c & 0x0F;
   ADCON0 = (c << 2) + 0x01; // set Channel Select
   for (i=0; i<10; i++); // wait 2.4us (approx)
   GODONE = 1; // start the A/D conversion
   while(GODONE); // wait until complete (approx 8us)
   return(ADRES);
   }   

// High-priority service
void interrupt IntServe(void)
{
   	if (INT0IF) {
  		LIGHT = 1;
      	INT0IF = 0;
    }   
   	if (INT1IF) {
      	LIGHT = 0;
      	INT1IF = 0;
    }   
   	if (INT2IF) {
      	INT2IF = 0;
    }   

   }
void NeoPixel_Display(unsigned char RED, 
		unsigned char GREEN, unsigned char BLUE)
{
   PIXEL = GREEN;	asm("  call Pixel_8 ");
   PIXEL = RED;		asm("  call Pixel_8 ");
   PIXEL = BLUE;	asm("  call Pixel_8 ");

   asm("    return");


#asm
Pixel_8:
    call	Pixel_1
    call	Pixel_1
    call	Pixel_1
    call	Pixel_1
    call	Pixel_1
    call	Pixel_1
    call	Pixel_1
    call	Pixel_1
    return

Pixel_1:
	bsf		((c:3971)),0	; PORTD,0
    nop
	btfss   ((c:0000)),7
	bcf		((c:3971)),0
	rlncf   ((c:0000)),F
    nop
    nop
    bcf		((c:3971)),0
    return

#endasm
   }



// Main Routine

void main(void)
{
   int i, N, NumPixels = 32;
   int B = 0;
   unsigned int RED, GREEN, BLUE;
   unsigned int A2D;


   TRISB = 0xFF;
   TRISC = 0;
   TRISD = 0;
   ADCON1 = 0x0F;

   LCD_Init();                  // initialize the LCD
   TRISD0 = 0;

   LCD_Move(0,0);  for (i=0; i<20; i++) LCD_Write(MSG0[i]); 
   LCD_Move(1,0);  for (i=0; i<20; i++) LCD_Write(MSG1[i]); 
   Wait_ms(100); 

// Turn on the A/D input
   TRISA = 0xFF;
   TRISE = 0x0F;
   ADCON2 = 0x95;
   ADCON1 = 0x07;
   ADCON0 = 0x01;

// Turn on INT0 interrupt
   INT0IE = 1;
   TRISB0 = 1;
   INTEDG0 = 1;

// Turn on INT1 interrupt
   INT1IE = 1;
   TRISB1 = 1;
   INTEDG1 = 0;

// Turn on INT2 interrupt
   INT2IE = 1;
   TRISB2 = 1;
   INTEDG2 = 1;

// turn on all interrupts
   GIE = 1;

// Base Program
	A2D = A2D_Read(0);
	if(A2D < 255){RED=255; GREEN=0;  BLUE=0;}
	else if((A2D > 256)&&(A2D < 511)){RED=0; GREEN=255;  BLUE=0;}
	else if((A2D > 512)&&(A2D < 767)){RED=0; GREEN=0;  BLUE=255;}
	else if(A2D > 768){RED=255; GREEN=255;  BLUE=255;}
   
	while(1) {
		if(LIGHT){
			N = 0;
			while(N < NumPixels){
				for (i=0; i<N; i++){
					NeoPixel_Display(RED, GREEN, BLUE);
				}
				for (i = NumPixels-N; i>0; i--){
					NeoPixel_Display(0, 0, 0);
				}
				N++;
				Wait_ms(20);
			}
			while(LIGHT){
				A2D = A2D_Read(0);
				LCD_Move(1,3); LCD_Out(A2D, 3, 0);
				if(A2D < 255){RED=255; GREEN=0;  BLUE=0;}
				else if((A2D > 256)&&(A2D < 511)){RED=0; GREEN=255;  BLUE=0;}
				else if((A2D > 512)&&(A2D < 767)){RED=0; GREEN=0;  BLUE=255;}
				else if(A2D > 768){RED=255; GREEN=255;  BLUE=255;}
				for (i=0; i<NumPixels; i++){
					NeoPixel_Display(RED, GREEN, BLUE);
				}
				if(!LIGHT){
					N = NumPixels;
					while(N > 0){
						for (i=N-1; i>0; i--){
							NeoPixel_Display(RED, GREEN, BLUE);
						}
						for (i = NumPixels-N+1; i>0; i--){
							NeoPixel_Display(0, 0, 0);
						}
						N--;
						Wait_ms(20);
					}
				}
			}
		}	
	}
}
